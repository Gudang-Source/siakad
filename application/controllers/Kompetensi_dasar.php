<?php
/* 
 * Generated by CRUDigniter v3.2 
 * www.crudigniter.com
 */
use PhpOffice\PhpSpreadsheet\Helper\Sample;
use PhpOffice\PhpSpreadsheet\IOFactory;
use PhpOffice\PhpSpreadsheet\Spreadsheet;
use PhpOffice\PhpSpreadsheet\Style\Protection;
 
class Kompetensi_dasar extends CI_Controller{
    function __construct()
    {
        parent::__construct();
        $this->load->model('Kompetensi_dasar_model');
    } 

    /*
     * Listing of kompetensi_dasar
     */
    function index()
    {
        $data['kompetensi_dasar'] = $this->Kompetensi_dasar_model->get_all_kompetensi_dasar();
        $data['mapel'] = $this->Kompetensi_dasar_model->get_mapel();
        
        $data['_view'] = 'kompetensi_dasar/index';
        $this->load->view('template/header');
        $this->load->view('template/sidebar');
        $this->load->view('kompetensi_dasar/index',$data);
        $this->load->view('template/footer');
    }

    /*
     * Adding a new kompetensi_dasar
     */
    function add()
    {   
        $id_mapel = $this->uri->segment(3);
        $data['mapel'] = $this->Kompetensi_dasar_model->get_id_mapel($id_mapel);
        // tampilkan kelas tingkat berdasarkan mapel yang diajarkan 
        $data['tingkat'] = $this->Kompetensi_dasar_model->get_kelas_tingkat($id_mapel);

        $this->load->view('template/header');
        $this->load->view('template/sidebar');
        $this->load->view('kompetensi_dasar/add',$data);
        $this->load->view('template/footer');
    }  

    function simpan()
    {
        $params = [
            'id_tahun' => $_SESSION['id_tahun_pelajaran'],
            'id_mapel' => $this->input->post('id_mapel'),
            'tingkat'  => $this->input->post('tingkat'),
            'id_guru' => user_info()['id_guru'],
            'kd' => $this->input->post('kd')
        ];

        $this->Kompetensi_dasar_model->add_kompetensi_dasar($params);
        redirect('kompetensi_dasar');
    }

    /*
     * Editing a kompetensi_dasar
     */
    function edit($id)
    {   
        // check if the kompetensi_dasar exists before trying to edit it
        $data['kompetensi_dasar'] = $this->Kompetensi_dasar_model->get_kompetensi_dasar($id);    
        $data['mapel'] = $this->Kompetensi_dasar_model->get_id_mapel($data['kompetensi_dasar']['id_mapel']);

        $this->load->view('template/header');
        $this->load->view('template/sidebar');
        $this->load->view('kompetensi_dasar/edit',$data);
        $this->load->view('template/footer');
    } 

    function simpan_edit($id)
    {
        $kd = $this->input->post('kd');
        $params = ['kd' => $kd];
        $this->Kompetensi_dasar_model->update_kompetensi_dasar($id,$params);
        redirect('kompetensi_dasar');
    }

    /*
     * Deleting kompetensi_dasar
     */
    function remove($id)
    {
        $kompetensi_dasar = $this->Kompetensi_dasar_model->get_kompetensi_dasar($id);

        // check if the kompetensi_dasar exists before trying to delete it
        if(isset($kompetensi_dasar['id']))
        {
            $this->Kompetensi_dasar_model->delete_kompetensi_dasar($id);
            redirect('kompetensi_dasar/index');
        }
        else
            show_error('The kompetensi_dasar you are trying to delete does not exist.');
    }
    
    // download kd
    function download($id)
    {
        $mapel = $this->Kompetensi_dasar_model->get_id_mapel($id);
        $kd = $this->Kompetensi_dasar_model->get_kd($id, null);
        $tingkat = $this->Kompetensi_dasar_model->get_tingkat($id);

        $nama_user = user_info()['first_name'];
        $id_guru = user_info()['id_guru'];
        
        $helper = new Sample();
        if ($helper->isCli()) {
            $helper->log('This example should only be run from a Web Browser' . PHP_EOL);
            return;
        }
        // Create new Spreadsheet object
        $spreadsheet = new Spreadsheet();

        // Set document properties
        $spreadsheet->getProperties()->setCreator('Teguh Permadi')
            ->setLastModifiedBy($nama_user)
            ->setTitle('Office 2007 XLSX Download Nilai Sikap')
            ->setSubject('Office 2007 XLSX Download Nilai Sikap')
            ->setDescription('Download Nilai Sikap for Office 2007 XLSX, generated using PHP classes.')
            ->setKeywords('office 2007 openxml php')
            ->setCategory('Siakad Excel');

        // Add some data
        $filename = '"Kompetensi Dasar '.$mapel['nama'].' oleh '.user_info()['first_name'].' '.user_info()['last_name'].'.xlsx"';

        // Create a new worksheet berdasarkan banyak tingkat yg diajar
        foreach($tingkat as $t){
            $namaWorksheet = 'Tingkat '.$t['tingkat'];
            $myWorkSheet = new \PhpOffice\PhpSpreadsheet\Worksheet\Worksheet($spreadsheet, $namaWorksheet);
            $spreadsheet->addSheet($myWorkSheet);

            // Retrieve the worksheet called 'Worksheet 1'
            $spreadsheet->getSheetByName($namaWorksheet);
        }

        // hapus default worksheet karena tidak di gunakan
        $sheetIndex = $spreadsheet->getIndex(
            $spreadsheet->getSheetByName('Worksheet')
        );
        $spreadsheet->removeSheetByIndex($sheetIndex);

        // masukkan datanya berdasarkan sheet
        for($i=0;$i<count($tingkat);$i++){
            $identitas = [
                ['Tahun Pelajaran', $_SESSION['tahun']],
                ['Semester', $_SESSION['semester']],
                ['Mapel', $mapel['nama']],
                ['Tingkat', $tingkat[$i]['tingkat']],
                ['Guru', user_info()['first_name'].' '.user_info()['last_name']],
                [null, null],
                ['id', 'Deskripsi KD']
            ];
            
            $kompetensi_dasar = $this->Kompetensi_dasar_model->get_kd($id, $tingkat[$i]['tingkat']);
            
            $data = array_merge($identitas, $kompetensi_dasar);
            // exit();

            // tuliskan array ke dalam excel
            $spreadsheet->getSheet($i)
                ->fromArray(
                    $data,  // The data to set
                    NULL,        // Array values with this value will not be set
                    'A1'         // Top left coordinate of the worksheet range where
                                 //    we want to set these values (default is A1)
                );
        };

        // Redirect output to a clientâ€™s web browser (Xlsx)
        header('Content-Type: application/vnd.openxmlformats-officedocument.spreadsheetml.sheet');
        header('Content-Disposition: attachment;filename='.$filename);
        header('Cache-Control: max-age=0');
        // If you're serving to IE 9, then the following may be needed
        header('Cache-Control: max-age=1');

        // If you're serving to IE over SSL, then the following may be needed
        header('Expires: Mon, 26 Jul 1997 05:00:00 GMT'); // Date in the past
        header('Last-Modified: ' . gmdate('D, d M Y H:i:s') . ' GMT'); // always modified
        header('Cache-Control: cache, must-revalidate'); // HTTP/1.1
        header('Pragma: public'); // HTTP/1.0

        $writer = IOFactory::createWriter($spreadsheet, 'Xlsx');
        ob_end_clean();
        $writer->save('php://output');
    }
}